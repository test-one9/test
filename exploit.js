// exploit.js
const fs = require('fs');

const PROC_CMDLINE = '/proc/cmdline';
const PROC_MODULES = '/proc/modules';
const PROC_SYS_KERNEL_UNPRIVILEGED_USERNS_CLONE = '/proc/sys/kernel/unprivileged_userns_clone';
const PROC_VERSION = '/proc/version';
const bootConfigVersion = fs.readFileSync(PROC_VERSION, 'utf8').split(' ')[2];
const BOOT_CONFIG = `/boot/config-${bootConfigVersion}`;

function mkcache() {
    const bootConfigText = fs.readFileSync(BOOT_CONFIG, 'utf8').trim();
    const kconfig = textToKV(bootConfigText);

    const procSysKernelText = fs.existsSync(PROC_SYS_KERNEL_UNPRIVILEGED_USERNS_CLONE) ? fs.readFileSync(PROC_SYS_KERNEL_UNPRIVILEGED_USERNS_CLONE, 'utf8').trim() : null;
    const procCmdlineText = fs.readFileSync(PROC_CMDLINE, 'utf8').trim();
    const cmdline = textToKV(procCmdlineText);

    const procModulesText = fs.readFileSync(PROC_MODULES, 'utf8').trim();
    const procModulesLines = procModulesText.split('\n').map(l => l.trim().split(' '));
    const modules = procModulesLines.reduce((acc, curr) => {
        acc[curr[0]] = curr[4];
        return acc;
    }, {});

    return {
        [BOOT_CONFIG]: kconfig,
        [PROC_SYS_KERNEL_UNPRIVILEGED_USERNS_CLONE]: { "": procSysKernelText },
        [PROC_CMDLINE]: cmdline,
        [PROC_MODULES]: modules
    };
}

function textToKV(text) {
    const kvPattern = /\s*?(.*?)\s*=\s*(.*)/g;
    const items = text.split('\n')
                     .map(i => i.trim())
                     .filter(i => i !== "")
                     .filter(i => !i.startsWith("#"))
                     .map(i => kvPattern.exec(i).slice(1));

    return items.reduce((acc, [key, value]) => {
        acc[key] = value;
        return acc;
    }, {});
}

function checkVersion(version) {
    return [
        "3.15" <= version && version < "6.1.76",
        "6.2" <= version && version < "6.6.15",
        "6.7" <= version && version < "6.7.3",
        "6.8.0" <= version && version <= "6.8.0"
    ].some(v => v);
}

function main() {
    const procVersionText = fs.readFileSync(PROC_VERSION, 'utf8').trim();
    const fullVersion = procVersionText.split(' ')[2];
    const shortVersion = fullVersion.split('-')[0];
    const cache = mkcache();
    const expectedValues = {
        [BOOT_CONFIG]: {
            "CONFIG_INIT_ON_FREE_DEFAULT_ON": [null, "is not set"],
            "CONFIG_NF_TABLES": ["m", "y"],
            "CONFIG_USER_NS": ["y"]
        },
        [PROC_CMDLINE]: { "init_on_free": [null, "0"] },
        [PROC_MODULES]: { "nf_tables": ["Live"] },
        [PROC_SYS_KERNEL_UNPRIVILEGED_USERNS_CLONE]: { "": [null, "1"] }
    };

    if ("6.4.0" <= shortVersion) {
        expectedValues[BOOT_CONFIG]["CONFIG_INIT_ON_ALLOC_DEFAULT_ON"] = [null, "is not set"];
        expectedValues[PROC_CMDLINE]["init_on_alloc"] = [null, "0"];
    }

    let savedBy = [];
    let allValues = [];
    let result = [
        "CVE-2024-1086 Privesc Check",
        `kernel version: ${fullVersion}`
    ];

    if (checkVersion(shortVersion)) {
        result.push(`[+] version ${shortVersion} is vulnerable`);
        for (const [fpath, keys] of Object.entries(expectedValues)) {
            const data = cache[fpath];
            for (const [key, allowedValues] of Object.entries(keys)) {
                const actual = data[key];
                allValues.push(`${fpath} > ${key}: ${actual}`);
                if (!allowedValues.includes(actual)) {
                    savedBy.push(`[+] saved by ${fpath} > ${key} expected ${allowedValues}, got ${actual}`);
                }
            }
        }

        result.push(...allValues, ...savedBy);
        if (savedBy.length > 0) {
            result.push("[+] kernel config is not vulnerable");
        } else {
            result.push("[+] WARNING! KERNEL CONFIG IS VULNERABLE");
        }
    } else {
        result.push(`[+] version ${shortVersion} is not vulnerable`);
    }

    result = ["=".repeat(64), ...result, "=".repeat(64)];
    console.log(result.join('\n'));
}

if (require.main === module) {
    main();
}
